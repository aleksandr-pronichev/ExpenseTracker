package com.example.expensetracker.screens.add

import android.widget.Toast
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Save
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import com.example.expensetracker.model.Transaction
import com.example.expensetracker.viewmodel.CategoryViewModel
import com.example.expensetracker.viewmodel.TransactionViewModel
import androidx.compose.material3.ExposedDropdownMenuBox
import androidx.compose.material3.ExposedDropdownMenuDefaults
import androidx.compose.material3.AssistChip
import androidx.compose.material3.AssistChipDefaults
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.material3.SnackbarHost
import androidx.compose.material3.SnackbarHostState
import kotlinx.coroutines.launch

fun getCategoryIcon(category: String): String {
    return when (category.lowercase()) {
        "–ø—Ä–æ–¥—É–∫—Ç—ã" -> "üçî"
        "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç" -> "üöó"
        "–∑–∞—Ä–ø–ª–∞—Ç–∞" -> "üí∞"
        "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è" -> "üéâ"
        "—Ü–≤–µ—Ç—ã" -> "üå∏"
        "–æ–¥–µ–∂–¥–∞" -> "üõç"
        "–¥–æ–º" -> "üè†"
        "–∑–¥–æ—Ä–æ–≤—å–µ" -> "üíä"
        else -> "üè∑"
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AddTransactionScreen(
    categoryViewModel: CategoryViewModel,
    transactionViewModel: TransactionViewModel
) {
    var amount by remember { mutableStateOf("") }
    var selectedCategory by remember { mutableStateOf("") }
    var amountError by remember { mutableStateOf(false) }
    var categoryError by remember { mutableStateOf(false) }

    var comment by remember { mutableStateOf("") }
    val context = LocalContext.current
    val focusRequester = remember { FocusRequester() }

    var type by remember { mutableStateOf("expense") }

    val categories by categoryViewModel.categories.collectAsState()

    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()

    Scaffold(
        snackbarHost = { SnackbarHost(snackbarHostState) }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp)
                .padding(padding),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Text("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é", style = MaterialTheme.typography.headlineSmall)

            OutlinedTextField(
                value = amount,
                onValueChange = {
                    if (it.all { char -> char.isDigit() || char == '.' }) {
                        amount = it
                        amountError = false
                    }
                },
                label = { Text("–°—É–º–º–∞") },
                isError = amountError,
                leadingIcon = { Text("‚ÇΩ") },
                singleLine = true,
                keyboardOptions = KeyboardOptions.Default.copy(
                    keyboardType = KeyboardType.Number
                ),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp)
                    .focusRequester(focusRequester)
            )


            var expanded by remember { mutableStateOf(false) }

            ExposedDropdownMenuBox(
                expanded = expanded,
                onExpandedChange = { expanded = !expanded }
            ) {
                OutlinedTextField(
                    value = selectedCategory,
                    onValueChange = {},
                    readOnly = true,
                    label = { Text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è") },
                    trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },
                    modifier = Modifier
                        .menuAnchor()
                        .fillMaxWidth()
                        .padding(vertical = 8.dp)
                )

                ExposedDropdownMenu(
                    expanded = expanded,
                    onDismissRequest = { expanded = false }
                ) {
                    categories.forEach { category ->
                        DropdownMenuItem(
                            text = {
                                Text(text = "${getCategoryIcon(category.name)} ${category.name}")
                            },
                            onClick = {
                                selectedCategory = category.name
                                expanded = false
                            }
                        )
                    }

                }
            }


            Row {
                Text("–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", style = MaterialTheme.typography.bodyMedium)
                Spacer(modifier = Modifier.height(8.dp))

                Row(horizontalArrangement = Arrangement.spacedBy(12.dp)) {
                    AssistChip(
                        onClick = { type = "expense" },
                        label = { Text("–†–∞—Å—Ö–æ–¥") },
                        colors = AssistChipDefaults.assistChipColors(
                            containerColor = if (type == "expense") MaterialTheme.colorScheme.primary.copy(
                                alpha = 0.1f
                            )
                            else MaterialTheme.colorScheme.surface
                        )
                    )
                    AssistChip(
                        onClick = { type = "income" },
                        label = { Text("–î–æ—Ö–æ–¥") },
                        colors = AssistChipDefaults.assistChipColors(
                            containerColor = if (type == "income") MaterialTheme.colorScheme.primary.copy(
                                alpha = 0.1f
                            )
                            else MaterialTheme.colorScheme.surface
                        )
                    )
                }
            }

            OutlinedTextField(
                value = comment,
                onValueChange = { comment = it },
                label = { Text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π") },
                modifier = Modifier.fillMaxWidth()
            )

            Button(
                onClick = {
                    if (amount.isBlank()) {
                        amountError = true
                        focusRequester.requestFocus()
                        scope.launch {
                            snackbarHostState.showSnackbar("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
                        }
                        return@Button
                    }

                    if (selectedCategory.isBlank()) {
                        categoryError = true
                        scope.launch {
                            snackbarHostState.showSnackbar("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
                        }
                        return@Button
                    }

                    val parsedAmount = amount.toDoubleOrNull()
                    if (parsedAmount != null) {
                        transactionViewModel.addTransaction(
                            amount = parsedAmount,
                            category = selectedCategory,
                            comment = comment,
                            type = type
                        )

                        amount = ""
                        selectedCategory = ""
                        comment = ""

                        scope.launch {
                            val result = snackbarHostState.showSnackbar(
                                message = "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞",
                                actionLabel = "–û—Ç–º–µ–Ω–∏—Ç—å"
                            )
                            if (result == SnackbarResult.ActionPerformed) {
                                transactionViewModel.undoLastTransaction()
                                scope.launch {
                                    snackbarHostState.showSnackbar("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞")
                                }
                            }

                        }

                        amount = ""
                        selectedCategory = ""
                        comment = ""
                    } else {
                        scope.launch {
                            snackbarHostState.showSnackbar("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")
                        }
                    }

                },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(top = 8.dp)
                    .height(52.dp),
                shape = RoundedCornerShape(12.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = MaterialTheme.colorScheme.primary
                )
            ) {
                Icon(
                    imageVector = Icons.Default.Save,
                    contentDescription = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                    modifier = Modifier.size(20.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
            }

        }
    }
}